name: Build & Push Docker Image

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up QEMU (for ARM builds)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # - name: Build & Push Docker Image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     push: true
    #     platforms: linux/arm64,linux/amd64
    #     tags: erickhdez1997/pi-ui:dev
    #     cache-from: type=local,src=/tmp/.buildx-cache
    #     cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

    # - name: Install cloudflared
    #   run: |
    #       curl -L https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-archive-keyring.gpg >/dev/null
    #       echo "deb [signed-by=/usr/share/keyrings/cloudflare-archive-keyring.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee  /etc/apt/sources.list.d/cloudflared.list
    #       sudo apt update
    #       sudo apt install cloudflared
              
    # - name: Install cloudflared
    #   run: |
    #     curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared.deb
    #     sudo dpkg -i cloudflared.deb

    # - name: SSH to Pi via Cloudflare Tunnel and Deploy
    #   env:
    #     CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
    #     CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
    #   run: |
    #     cloudflared access ssh --hostname ssh.qtpis.com -- github << 'EOF'
    #       export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    #       cd ~/kube-manifests
    #       git pull
    #       cd ~/kube-manifests/k8s/dev
    #       kubectl apply -f deployment.yaml -n app-dev
    #       kubectl apply -f service.yaml -n app-dev
    #       kubectl apply -f cluster-issuer.yaml -n app-dev
    #       kubectl apply -f certificate.yaml -n app-dev
    #       kubectl apply -f ingress.yaml -n app-dev
    #       kubectl rollout restart deployment pi-ui -n app-dev
    #     EOF

    - name: Deploy to Raspberry Pi (K3s)
      uses: appleboy/ssh-action@v0.1.10
      with:
        # host: ${{ secrets.DUCK_DNS_HOST }}
        # port: 22
        # username: ${{ secrets.PI_USER }}
        # key: ${{ secrets.PI_SSH_KEY }}
        host: ehpi.duckdns.org
        port: 22
        username: github
        key: ${{ secrets.PI_SSH_KEY }}
        script: |
          # Clone the repository on the Raspberry Pi
          sudo export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          cd /home/${{ secrets.PI_USER }}/kube-manifests
          git pull
          cd ~/kube-manifests/k8s/dev
          kubectl apply -f deployment.yaml -n app-dev
          kubectk apply -f service.yaml -n app-dev
          kubectl apply -f cluster-issuer.yaml -n app-dev
          kubectl apply -f certificate.yaml -n app-dev
          kubectl apply -f ingress.yaml -n app-dev
          kubectl rollout restart deployment pi-ui -n app-dev

    - name: Forward SSH Port
      uses: selfagency/ssh-port-forward-action@v1.0.5
      with:
          ssh-host: ehpi.duckdns.org # Pi's public IP or domain name
          ssh-port: 22 # Forwarded port (e.g., 2222)
          ssh-user: pi
          ssh-key: ${{ secrets.PI_SSH_KEY }} # Your SSH key
          local-port: 22 # Local port on runner
          remote-host: localhost
          remote-port: 22 # Pi's internal SSH port

    # - name: Deploy to Raspberry Pi (K3s)
    #   jobs:
    #     ssh_command:
    #         if: github.event.pull_request.merged == true
    #         name: Run SSH command
    #       needs: terraform_apply
    #       runs-on: ubuntu-latest
    #       steps:
    #         - name: Connect and run command on remote server
    #           uses: and-fm/cloudflared-ssh-action@v3
    #           with:
    #             host: ${{ secrets.SSH_HOST }}
    #             username: ${{ secrets.SSH_USERNAME }}
    #             private_key_filename: ${{ secrets.SSH_PRIVATE_KEY_FILENAME }}
    #             private_key_value: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
    #             port: ${{ secrets.SSH_PORT }}
    #             service_token_id: ${{ secrets.SERVICE_TOKEN_ID }}
    #             service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}
    #             commands: mkdir hello-world -v
